{# Complex inventory aging analysis with repetitive calculations #}
INSERT OVERWRITE TABLE inventory_aging
SELECT 
    p.product_id,
    p.name,
    p.category,
    (SELECT MAX(s1.sale_date) FROM sales_raw s1 WHERE s1.product_name = p.name) as last_sale_date,
    DATEDIFF(CURRENT_DATE, 
        (SELECT MAX(s2.sale_date) FROM sales_raw s2 WHERE s2.product_name = p.name)
    ) as days_since_last_sale,
    (SELECT SUM(s3.quantity) 
     FROM sales_raw s3 
     WHERE s3.product_name = p.name 
     AND s3.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
    ) as last_30_days_sales,
    (SELECT AVG(s4.quantity) 
     FROM sales_raw s4 
     WHERE s4.product_name = p.name
     AND s4.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY)
    ) as avg_90_day_sales,
    CASE 
        WHEN (SELECT MAX(s5.sale_date) FROM sales_raw s5 WHERE s5.product_name = p.name) < DATE_SUB(CURRENT_DATE, INTERVAL 90 DAY) THEN 'Obsolete'
        WHEN (SELECT MAX(s6.sale_date) FROM sales_raw s6 WHERE s6.product_name = p.name) < DATE_SUB(CURRENT_DATE, INTERVAL 60 DAY) THEN 'At Risk'
        WHEN (SELECT MAX(s7.sale_date) FROM sales_raw s7 WHERE s7.product_name = p.name) < DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY) THEN 'Slow Moving'
        ELSE 'Active'
    END as inventory_status,
    (SELECT COUNT(DISTINCT s8.customer_id) 
     FROM sales_raw s8 
     WHERE s8.product_name = p.name
    ) as total_unique_customers,
    (SELECT STRING_AGG(DISTINCT c.name, ', ') 
     FROM sales_raw s9 
     JOIN customers_raw c ON s9.customer_id = c.customer_id 
     WHERE s9.product_name = p.name 
     AND s9.sale_date >= DATE_SUB(CURRENT_DATE, INTERVAL 30 DAY)
    ) as recent_buyers
FROM products_raw p;
